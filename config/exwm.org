#+TITLE: EXWM Config

I use Spacemacs as my Window Manager.

* General configuration
  #+begin_src emacs-lisp :tangle .tangle/layers/exwm.el
    (add-to-list 'dotspacemacs-configuration-layers
                 '(exwm :variables
                        exwm-autostart-xdg-applications t
                        exwm-enable-systray t
                        exwm-input-line-mode-passthrough t
                        exwm-floating-border-color "#586e75"
                        exwm-layout-show-all-buffers t
                        exwm-workspace-show-all-buffers t
                        exwm-manage-force-tiling t
                        exwm-locking-command "i3lock -n --color=002b36"))
  #+end_src

  #+begin_src emacs-lisp :tangle .tangle/user-config/exwm.el
    (spacemacs/toggle-desktop-environment-on)
    (defun exwm-input-set-keys (l)
      (dolist (a l)
        (exwm-input-set-key (eval (car a)) (eval (cdr a)))))

    (defun run-in-vterm-kill (process event)
      "A process sentinel. Kills PROCESS's buffer if it is live."
      (let ((b (process-buffer process)))
        (and (buffer-live-p b)
             (kill-buffer b))))

    (defun run-in-vterm (command)
      "Execute string COMMAND in a new vterm.

      Interactively, prompt for COMMAND with the current buffer's file
      name supplied. When called from Dired, supply the name of the
      file at point.

      Like `async-shell-command`, but run in a vterm for full terminal features.

      The new vterm buffer is named in the form `*foo bar.baz*`, the
      command and its arguments in earmuffs.

      When the command terminates, the shell remains open, but when the
      shell exits, the buffer is killed."
      (interactive
       (list
        (let* ((f (cond (buffer-file-name)
                        ((eq major-mode 'dired-mode)
                         (dired-get-filename nil t))))
               (filename (concat " " (shell-quote-argument (and f (file-relative-name f))))))
          (read-shell-command "Terminal command: "
                              (cons filename 0)
                              (cons 'shell-command-history 1)
                              (list filename)))))
      (with-current-buffer (vterm (concat "*" command "*"))
        (set-process-sentinel vterm--process #'run-in-vterm-kill)
        (vterm-send-string command)
        (vterm-send-return)))

    (defun eop/toggle-desktop-notifications-on ()
      (interactive)
      (start-process-shell-command "dunstctl" nil "dunstctl set-paused false"))

    (defun eop/toggle-desktop-notifications-off ()
      (interactive)
      (start-process-shell-command "dunstctl" nil "dunstctl set-paused true"))

    (defun eop/toggle-desktop-notifications ()
      (interactive)
      (start-process-shell-command "dunstctl" nil "dunstctl set-paused toggle"))

    (use-package exwm
      :config
      (progn (exwm-input-set-keys
              '(((kbd "s-n") . (lambda ()
                                 (interactive)
                                 (start-process-shell-command
                                  "dunstctl" nil "dunstctl close")))
                ((kbd "s-N") . (lambda ()
                                 (interactive)
                                 (start-process-shell-command
                                  "dunstctl" nil "dunstctl history-pop")))
                ((kbd "s-f") . (lambda () (interactive) (exwm/app-launcher "qutebrowser")))
                ((kbd "s-F") . (lambda () (interactive) (exwm/app-launcher "chromium")))
                ((kbd "s-C-F") . (lambda () (interactive) (exwm/app-launcher "firefox")))
                ((kbd "s-s") . (lambda () (interactive) (exwm/app-launcher "slack")))
                ((kbd "s-p") . (lambda () (interactive) (run-in-vterm "pulsemixer && exit")))
                ((kbd "s-P") . (lambda () (interactive) (run-in-vterm "fzpass && exit")))
                ((kbd "C-s-l") . (lambda () (interactive)
                                   (start-process-shell-command "lock" nil exwm-locking-command)))
                ((kbd "s-w") . 'ace-window)
                ((kbd "s-x") . 'ace-delete-window)
                ((kbd "s-t") . 'ace-swap-window)
                ((kbd "<M-return>") . (lambda ()
                                        (interactive)
                                        (if (projectile-project-p)
                                            (projectile-run-vterm)
                                          (vterm))))
                ((kbd "<s-return>") . (lambda ()
                                        (interactive)
                                        (if (projectile-project-p)
                                            (projectile-run-vterm t)
                                          (vterm)))))))
      :custom
      (mouse-autoselect-window t)
      (focus-follows-mouse t)
      (exwm-randr-workspace-monitor-plist
       (pcase system-name
         ("aphex" '(2 "HDMI-0" 1 "DP-0" 0 "DP-2"))
         ("beethoven" '(0 "eDP1")))))

    (add-hook 'exwm-randr-screen-change-hook
              (lambda ()
                (let ((surplus (- (exwm-workspace--count)
                                  (string-to-number
                                   (shell-command-to-string
                                    "xrandr|grep \" connected\"|wc -l")))))
                  (cond ((< 0 surplus) (dotimes (_ surplus)
                                         (exwm-workspace-delete)))
                        ((< surplus 0) (dotimes (_ (* -1 surplus))
                                         (exwm-workspace-add)))
                        (t nil)))))

    (use-package window-purpose
      :config
      (progn (purpose-compile-user-configuration)
             (spacemacs/transient-state-register-add-bindings 'layouts
               '(("f" purpose-load-window-layout :exit t))))
      :custom
      (purpose-use-built-in-layouts nil)
      (purpose-user-mode-purposes
       '((magit-status-mode . debug)
         (vterm-mode . debug)
         (cider-repl-mode . debug)
         (helpful-mode . debug)
         (help-mode . debug)
         (exwm-mode . gui)))
      (purpose-user-regexp-purposes
       '(("^X:Zoom.*" . zoom)
         ("^X:Thunderbird.*" . mail)
         ("^X:discord.*" . discord)
         ("^X:Slack.*" . slack)
         ("^X:qutebrowser.*$" . browser)
         ("^X:firefox.*$" . browser)
         ("^X:Chromium/[^rD].*$" . browser)
         ("^X:Chromium/\\(re-frame-10x\\|DevTools\\).*$" . debug))))
  #+end_src
